{
	"name": "Dynamic SQL Create update table sps",
	"properties": {
		"content": {
			"query": "-- Before beginning, let's create and populate the sample tables we'll be using in this demonstration. We'll be using the Weather and Geography tables from the New York Taxicab dataset.\nIF OBJECT_ID('[dbo].[Weather]', 'U') IS NOT NULL\n  DROP TABLE [dbo].[Weather];\nGO\nCREATE TABLE [dbo].[Weather]\n(\n  [DateID] [int] NOT NULL,\n  [GeographyID] [int] NOT NULL,\n  [PrecipitationInches] [float] NOT NULL,\n  [AvgTemperatureFahrenheit] [float] NOT NULL\n)\nWITH\n(\n  DISTRIBUTION = ROUND_ROBIN,\n  CLUSTERED COLUMNSTORE INDEX\n);\n\nIF OBJECT_ID('[dbo].[Geography]', 'U') IS NOT NULL\n  DROP TABLE [dbo].[Geography];\nGO\nCREATE TABLE [dbo].[Geography]\n(\n  [GeographyID] int NOT NULL,\n  [ZipCodeBKey] varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n  [County] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n  [City] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n  [State] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n  [Country] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n  [ZipCode] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\n)\nWITH\n(\n  DISTRIBUTION = ROUND_ROBIN,\n  CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\n-- Now let's load data into our tables from the public endpoint. For more information on loading the New York Taxicab dataset using COPY,\n-- please see https://docs.microsoft.com/azure/synapse-analytics/sql-data-warehouse/load-data-from-azure-blob-storage-using-copy.\nCOPY INTO [dbo].[Weather]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/Weather'\nWITH\n(\n  FILE_TYPE = 'CSV',\n  FIELDTERMINATOR = ',',\n  FIELDQUOTE = '',\n  ROWTERMINATOR='0X0A'\n);\nGO\n\nCOPY INTO [dbo].[Geography]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/Geography'\nWITH\n(\n  FILE_TYPE = 'CSV',\n  FIELDTERMINATOR = ',',\n  FIELDQUOTE = ''\n);\nGO\n\n/******************************************************************************************************************/\n\n-- Next we will create a simple procedure to update the PrecipitationInches column in the Weather table by 10%\nIF OBJECT_ID('[dbo].[IncreaseRainfallTenPercent]', 'P') IS NOT NULL\n  DROP PROCEDURE [dbo].[IncreaseRainfallTenPercent];\nGO\nCREATE PROCEDURE dbo.IncreaseRainfallTenPercent\nAS\nBEGIN\n  UPDATE dbo.Weather\n  SET PrecipitationInches = PrecipitationInches * 1.1;\nEND;\nGO\n\nSELECT * FROM dbo.Weather ORDER BY PrecipitationInches;\n-- We then execute the procedure with either EXEC or EXECUTE\nEXEC IncreaseRainfallTenPercent;\n-- Now we see PrecipitationInches has increased by 10%\nSELECT * FROM dbo.Weather ORDER BY PrecipitationInches;\n\n/******************************************************************************************************************/\n\n-- Let's now create a parametrized stored procedure. This example filters the Geography table on County and State.\nIF OBJECT_ID('[dbo].[CountyStateGeo]', 'P') IS NOT NULL\n  DROP PROCEDURE [dbo].[CountyStateGeo];\nGO\nCREATE PROC dbo.CountyStateGeo\n  @county varchar(50),\n  @state varchar(50)\nAS\n  SELECT GeographyID, ZipCodeBKey, City, Country, ZipCode FROM [dbo].[Geography]\n  WHERE County LIKE @county\n  AND State = @state;\nGO\n\n-- The following demonstrates various ways to call the parametrized stored procedure\n-- Executing using positional parameters\nEXEC CountyStateGeo 'Kings', 'NY';\n-- Executing using named parameters in order\nEXEC CountyStateGeo @county = 'Kings', @state = 'NY';\n-- Executing using named parameters out of order\nEXEC CountyStateGeo @state = 'NY', @county = 'Kings';\nGO\n\n/******************************************************************************************************************/\n\n-- Finally let's rewrite the previous stored procedure using sp_executesql to embed parameters, allow reusable SQL snippets, and encourage query plan reuse.\nDECLARE @SQLString NVARCHAR(500);\nDECLARE @ParmDefinition NVARCHAR(500);\nSET @SQLString = N'SELECT GeographyID, ZipCodeBKey, City, Country, ZipCode FROM [dbo].[Geography] WHERE County LIKE @county AND State = @state';\nSET @ParmDefinition = N'@county varchar(50), @state varchar(50)';\nEXECUTE sp_executesql\n  @SQLString,\n  @ParmDefinition,\n  @county = 'Kings',\n  @state = 'NY';\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "Banking_DXCmercuriaPOC",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}